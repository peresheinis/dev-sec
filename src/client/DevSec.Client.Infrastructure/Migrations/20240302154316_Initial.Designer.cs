// <auto-generated />
using System;
using DevSec.Client.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DevSec.Client.Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240302154316_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("DevSec.Client.Core.Entities.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ConfigurationId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SoundId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VideoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId");

                    b.HasIndex("SoundId");

                    b.HasIndex("VideoId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("DevSec.Client.Core.Entities.DeviceConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCompressEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMotionRecognitionEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsNotificationsEnabled")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("DeviceConfigurations");
                });

            modelBuilder.Entity("DevSec.Client.Core.Entities.DeviceGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("DevSec.Client.Core.Entities.DeviceSound", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("DeviceSounds");
                });

            modelBuilder.Entity("DevSec.Client.Core.Entities.DeviceVideo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ConfigurationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId");

                    b.HasIndex("SourceId");

                    b.ToTable("DeviceVideos");
                });

            modelBuilder.Entity("DevSec.Client.Core.Entities.SoundSource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Moniker")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SoundSources");
                });

            modelBuilder.Entity("DevSec.Client.Core.Entities.VideoConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("FramesPerSecond")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Width")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("VideoConfigurations");
                });

            modelBuilder.Entity("DevSec.Client.Core.Entities.VideoSource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Moniker")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("VideoSources");
                });

            modelBuilder.Entity("DeviceDeviceGroup", b =>
                {
                    b.Property<Guid>("DevicesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("TEXT");

                    b.HasKey("DevicesId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("DeviceDeviceGroup");
                });

            modelBuilder.Entity("DevSec.Client.Core.Entities.Device", b =>
                {
                    b.HasOne("DevSec.Client.Core.Entities.DeviceConfiguration", "Configuration")
                        .WithMany()
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevSec.Client.Core.Entities.DeviceSound", "Sound")
                        .WithMany()
                        .HasForeignKey("SoundId");

                    b.HasOne("DevSec.Client.Core.Entities.DeviceVideo", "Video")
                        .WithMany()
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("DevSec.Client.Core.Entities.DeviceIconColor", "Color", b1 =>
                        {
                            b1.Property<Guid>("DeviceId")
                                .HasColumnType("TEXT");

                            b1.Property<byte>("Blue")
                                .HasColumnType("INTEGER");

                            b1.Property<byte>("Green")
                                .HasColumnType("INTEGER");

                            b1.Property<float>("Opacity")
                                .HasColumnType("REAL");

                            b1.Property<byte>("Red")
                                .HasColumnType("INTEGER");

                            b1.HasKey("DeviceId");

                            b1.ToTable("Devices");

                            b1.WithOwner()
                                .HasForeignKey("DeviceId");
                        });

                    b.OwnsOne("DevSec.Client.Core.Entities.DeviceLocation", "Location", b1 =>
                        {
                            b1.Property<Guid>("DeviceId")
                                .HasColumnType("TEXT");

                            b1.Property<float>("Latitude")
                                .HasColumnType("REAL");

                            b1.Property<float>("Longtitude")
                                .HasColumnType("REAL");

                            b1.HasKey("DeviceId");

                            b1.ToTable("Devices");

                            b1.WithOwner()
                                .HasForeignKey("DeviceId");
                        });

                    b.Navigation("Color");

                    b.Navigation("Configuration");

                    b.Navigation("Location");

                    b.Navigation("Sound");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("DevSec.Client.Core.Entities.DeviceSound", b =>
                {
                    b.HasOne("DevSec.Client.Core.Entities.SoundSource", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("DevSec.Client.Core.Entities.DeviceVideo", b =>
                {
                    b.HasOne("DevSec.Client.Core.Entities.VideoConfiguration", "Configuration")
                        .WithMany()
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevSec.Client.Core.Entities.VideoSource", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Configuration");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("DeviceDeviceGroup", b =>
                {
                    b.HasOne("DevSec.Client.Core.Entities.Device", null)
                        .WithMany()
                        .HasForeignKey("DevicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevSec.Client.Core.Entities.DeviceGroup", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
